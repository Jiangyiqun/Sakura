{"version":3,"sources":["Home.js","Add_date.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","handleChangeCurrentPage","useStyles","makeStyles","theme","root","flexGrow","title","margin","spacing","react_default","a","createElement","className","AppBar","position","Toolbar","Typography","variant","color","IconButton","edge","target","href","MoreVert_default","Container","maxWidth","entry_default","value","Date","onChange","alert","Fab","size","aria-label","onClick","Add_default","React","Component","grid","width","MaterialUIPickers","_React$useState","useState","_React$useState2","slicedToArray","selectedDate","setSelectedDate","classes","material_ui_pickers_esm","utils","DateFnsUtils","Grid","container","justify","id","label","date","KeyboardButtonProps","Add","Button","App","state","currentPage","setState","src_Home_0","src_Add","console","log","Chip","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf0339e1.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\n// https://www.npmjs.com/package/react-calendar\n// https://reactjsexample.com/ultimate-calendar-for-your-react-app/\nimport Calendar from 'react-calendar' \n\nimport './Home.css';\n\nclass Home extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.handleChangeCurrentPage(\"Add\");\n  }\n\n  render() {\n    const useStyles = makeStyles(theme => ({\n      root: {\n        flexGrow: 1,\n      },\n      title: {\n        flexGrow: 1,\n      },\n      margin: {\n        margin: theme.spacing(1),\n      }\n    }));\n\n    return (\n      <div>\n          <div className={useStyles.root}>\n            <AppBar position=\"static\" className=\"app-bar\">\n              <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" className={useStyles.title}>\n                  Period Tracker\n                </Typography>\n                <IconButton edge=\"end\" color=\"inherit\" target=\"_blank\"\n                    href=\"https://github.com/XifeiNi/period-tracker\">\n                  <MoreIcon />\n                </IconButton>\n              </Toolbar>\n            </AppBar>\n          </div>\n\n          <Container maxWidth=\"xs\">\n            <Calendar value={[new Date(2019,7,27), new Date(2019,7,28)]}\n                onChange={(value) => alert('New date is: ', value)}/>\n          </Container>\n          \n          <div className=\"container-div\">\n          <div className=\"sub-container\">\n          <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" \n               className={useStyles.margin} onClick={this.handleClick}>\n            <AddIcon />\n          </Fab>\n          </div>\n          </div>\n          </div>\n    );\n  }\n}\n\nexport default Home;\n","import 'date-fns';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst useStyles = makeStyles({\n  grid: {\n    width: '60',\n  },\n});\n\nexport default function MaterialUIPickers() {\n  // The first commit of Material-UI\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\n\n  const classes = useStyles();\n\n  function handleDateChange(date) {\n    setSelectedDate(date);\n  }\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container className={classes.grid} justify=\"space-around\">\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"mui-pickers-date\"\n          label=\"Date\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport MaterialUIPickers from './Add_date';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Fab from '@material-ui/core/Fab';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport CloseIcon from '@material-ui/icons/Close';\nimport './Add_date.css'\n\nclass Add extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.handleChangeCurrentPage(\"Home\");\n  }\n\n  render() {\n    const useStyles = makeStyles(theme => ({\n      root: {\n        flexGrow: 1,\n      },\n      title: {\n        flexGrow: 1,\n      },\n      margin: {\n        margin: theme.spacing(1),\n      }\n    }));\n\n    return (\n      <div>\n        <div className={useStyles.root}>\n          <AppBar position=\"static\" className=\"app-bar\">\n            <Toolbar>\n              <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>\n              X\n              </Button>\n              <span>\n            <MaterialUIPickers variant=\"contained\" color=\"primary\"/>\n            </span>\n              <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>\n                Done\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Add;\n","// import third party library\nimport React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\n\n// import user defined js file\nimport './App.css';\nimport Home from './Home';\nimport Add from './Add';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleChangeCurrentPage = this.handleChangeCurrentPage.bind(this);\n    this.state = {\"currentPage\": \"Home\",\n\n  };\n\n  }\n\n\n  handleChangeCurrentPage(currentPage) {\n    let state = this.state;\n    state[\"currentPage\"] = currentPage;\n    this.setState(state);\n  }\n\n\n  render() {\n    let state = this.state;\n    if (state[\"currentPage\"] === \"Home\") {\n      return (\n        <Home handleChangeCurrentPage={this.handleChangeCurrentPage} state={state}/>\n      )\n    } else if (state[\"currentPage\"] === \"Add\") {\n      return (\n        <Add handleChangeCurrentPage={this.handleChangeCurrentPage}  state={state}/>\n      )\n    } else {\n      console.log(state);\n      return (\n        <Chip\n          label=\"Error! See console for detail\"\n          color=\"secondary\"\n        />\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\n// import SimpleBottomNavigation from './navigator'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}